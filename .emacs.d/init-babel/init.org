* UI
** Colors
#+BEGIN_SRC emacs-lisp
  ;;Colors
  (set-background-color "black")
  (set-foreground-color "white")

  ;; Ensure emacsclient/new frames use the same colors as above
  (customize-set-variable 'default-frame-alist `((background-color . "black")
                                                 (foreground-color . "white")))
#+END_SRC
** Default window size
Ensure that new frames start maximized.
#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'default-frame-alist
                          (append default-frame-alist
                                  `((fullscreen . maximized))))
#+END_SRC
** Menu bars
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC
** Shorten "yes-or-no" prompts
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Navigation
*** avy
Allows specific characters to be jumped to directly, across windows/frames,
with a very small number of keypresses. Avy effectively supersedes ace-jump-mode.
#+BEGIN_SRC emacs-lisp
  (require 'avy)
  (customize-set-variable 'avy-timeout-seconds 0.25)

  (require 'transient)
  (transient-define-prefix avy-transient ()
    "Transient menu for avy commands"
    ["Avy command"
     ("c" "avy-goto-char" avy-goto-char)
     ("l" "avy-goto-line" avy-goto-line)
     ("r" "avy-resume" avy-resume)
     ("s" "avy-isearch" avy-isearch)
     ("t" "avy-goto-char-timer" avy-goto-char-timer)
     ("w" "avy-goto-subword-1" avy-goto-subword-1)
     ]
    )

  (global-set-key (kbd "M-o") #'avy-transient)
#+END_SRC
*** windmove
Allows windows to be moved between with Shift+arrow keys
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
#+END_SRC
* Loading extra libraries
#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (defun add-load-directory (directory)
    (let ((default-directory directory))
      (add-to-list 'load-path default-directory)
      (setq normal-top-level-add-subdirs-inode-list nil)
      (normal-top-level-add-subdirs-to-load-path)
      (setq load-path (remove-duplicates load-path :test 'string=))))
#+END_SRC
** Add "lisp" directory in emacs directory
#+BEGIN_SRC emacs-lisp
  ;; Add everything under .emacs.d/lisp
  (add-load-directory (concat user-emacs-directory "lisp"))
  ;; (require 'package)
  ;; (add-to-list 'package-directory-list "~/.nix-profile/share/emacs/site-lisp/elpa")
  ;; (package-initialize)
#+END_SRC
** Add Erlang-specific emacs files
Erlang includes its own emacs mode. Include that from the installed directory.
#+BEGIN_SRC emacs-lisp
  (add-load-directory (expand-file-name "~/.nix-profile/lib/erlang/lib/tools-3.5.3/emacs/"))
#+END_SRC
* Change backup directory
Centralize backup files, rather than leading files with a trailing "~" all over the place.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'backup-directory-alist `("." . "~/.emacs.d/backups/"))
#+END_SRC
* Cross cutting concerns
** Highlight region
#+BEGIN_SRC emacs-lisp
  ;; Cross cutting concerns

  ;;Highlight region when selecting a region
  (transient-mark-mode 1)
#+END_SRC
** Electric pair mode
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
#+END_SRC
** Visual bell
#+BEGIN_SRC emacs-lisp
  ;;Turn off the error bell
  (customize-set-variable 'visible-bell t)
#+END_SRC
** Disabled commands
#+BEGIN_SRC emacs-lisp
  ;;Commands disabled by default that we wish to enable
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'set-goal-column 'disabled nil)
#+END_SRC
** Ido mode
#+BEGIN_SRC emacs-lisp
  (ido-mode 1)
  (ido-everywhere 1)
#+END_SRC

When trying to open a file, if Ido cannot find it in the current directory,
it will search other recently used directories to try to find a matching file.
This can be quite annoying when trying to create a new file.
The following setting disables this functionality.
#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'ido-auto-merge-work-directories-length -1)
#+END_SRC

** Parenthesis matching
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1) ;;Highlight pairs of matching parens
  (customize-set-variable 'show-paren-delay 0) ;;Highlight immediately
  (customize-set-variable 'show-paren-style 'mixed) ;;Highlight parens if both visible, otherwise highlight expression
#+END_SRC
** Indentation
Use spaces, not tabs, for indentation.
#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'indent-tabs-mode nil)
#+END_SRC
** Aggressive indent
#+BEGIN_SRC emacs-lisp

  ;; Aggressive indent mode, to keep non-whitespace sensitive languages always indented correctly.
  (require 'aggressive-indent)
#+END_SRC
* Custom set variables
Ensure custom set variables are stored somewhere other than init.el.
#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'custom-file (expand-file-name "~/.emacs.d/custom.el"))
  (load custom-file)
#+END_SRC
* Programming languages
** Language Server Protocol
Multiple languages have Language Server Protocol (LSP) plugins.
Ensure that these are available for subsequent languages
#+BEGIN_SRC emacs-lisp
  (require 'lsp)
  (require 'lsp-ui)
#+END_SRC
** Coq
#+BEGIN_SRC emacs-lisp
  (require 'coq-mode)
  (require 'company-coq)
#+END_SRC
*** Hooks
#+BEGIN_SRC emacs-lisp
  (add-hook 'coq-mode-hook 'company-coq-mode)
#+END_SRC
** Elm
#+BEGIN_SRC emacs-lisp
  ;; Elm
  (require 'elm-mode)
#+END_SRC
*** LSP
Initialize LSP related variables for Elm
#+BEGIN_SRC emacs-lisp
  (let ((bin-directory "~/.nix-profile/bin/"))
    (loop for (lsp-var bin) in
          '((lsp-elm-elm-format-path          "elm-format")
            (lsp-elm-elm-language-server-path "elm-language-server")
            (lsp-elm-elm-path                 "elm")
            (lsp-elm-elm-test-path            "elm-test"))
          do
          (customize-set-variable lsp-var (concat bin-directory bin))))
#+END_SRC
*** Hooks
#+BEGIN_SRC emacs-lisp
  (add-hook 'elm-mode-hook 'elm-format-on-save-mode)
  (add-hook 'elm-mode-hook 'paredit-mode)
  (add-hook 'elm-mode-hook 'lsp-mode)
#+END_SRC
** Haskell
#+BEGIN_SRC emacs-lisp
  (require 'lsp-haskell)
  ;; Structured Haskell Mode
  (require 'shm)
#+END_SRC
*** Hooks
#+BEGIN_SRC emacs-lisp
  (mapcar (lambda (hook)
            (add-hook 'haskell-mode-hook hook))
          '(interactive-haskell-mode
            lsp
            lsp-ui-mode
            structured-haskell-mode))
#+END_SRC
** Lisp
*** Paredit
Paredit is a (more or less) structural mode for editing Lisp files.
#+BEGIN_SRC emacs-lisp
    (require 'paredit)
#+END_SRC
*** Common Lisp
#+BEGIN_SRC emacs-lisp
  ;; Common Lisp
  (require 'slime)
  (slime-setup '(slime-fancy))
  (slime-require 'swank-listener-hooks)
  (setq slime-lisp-implementations
        '((sbcl ("sbcl" "--dynamic-space-size" "4096");; :coding-system utf-8-unix
                )))
  (setq inferior-lisp-program "sbcl")

#+END_SRC
*** Elisp
#+BEGIN_SRC emacs-lisp
  ;; Print full results of elisp expressions
  (customize-set-variable 'eval-expression-print-length nil)
  (customize-set-variable 'eval-expression-print-level nil)
#+END_SRC
*** Hooks
#+BEGIN_SRC emacs-lisp
  (let ((lisp-hooks '(emacs-lisp-mode-hook
                      lisp-mode-hook
                      scheme-mode-hook
                      lisp-interaction-mode-hook
                      clojure-mode-hook)))
    (mapcar (lambda (hook)
              (add-hook hook 'paredit-mode)
              (add-hook hook 'aggressive-indent-mode))
            lisp-hooks))
#+END_SRC
** Nix
#+BEGIN_SRC emacs-lisp
  (require 'nix-mode)
#+END_SRC
** Scala
#+BEGIN_SRC emacs-lisp
  (require 'scala-mode)
  (require 'lsp-metals)
#+END_SRC
** YAML
#+BEGIN_SRC emacs-lisp
  (require 'yaml-mode)
#+END_SRC
** KMonad kdb config
A mode for editing the *.kbd files used by KMonad.
Note that, unlike the rest of my modes, this is not installed by Nix.
#+BEGIN_SRC emacs-lisp
  (require 'kbd-mode)
  (add-hook 'kbd-mode-hook (lambda () (aggressive-indent-mode -1)))
#+END_SRC
* Other modes
** Lilypond
#+BEGIN_SRC emacs-lisp
  (require 'lilypond-mode)
  (add-to-list 'auto-mode-alist `("\\.ly\\'" . LilyPond-mode))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  ;; Magit
  (require 'magit)
#+END_SRC
*** Default menu level
Magit uses a menuing system called "transient" (which was originally just part
of magit) to allow for interaction with git with single-letter hotkeys. This
system allows for commands to live at different "levels", so that advanced
commands can be hidden by default. I want to see all commands, so I set the
default level to show to 7, which is the maximum.
#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'transient-default-level 7)
#+END_SRC

*** Diffs
Highlight word-level changes within diffs, always.
#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'magit-diff-refine-hunk 'all)
#+END_SRC
*** Default arguments
#+BEGIN_SRC emacs-lisp
  (defun add-magit-existing-default-arguments (symbol property &rest new-defaults)
    (let ((existing-defaults (get symbol property)))
      (put symbol
           property
           (cl-remove-duplicates (append new-defaults existing-defaults) :test 'equal))))
#+END_SRC
**** Logging
Git/magit can color log graphs, but does not do so by default. I find that a colored graph helps me see the structure
better, so I want the "--color" option to be set by default.
#+BEGIN_SRC emacs-lisp
  (add-magit-existing-default-arguments
   'magit-log-mode 'magit-log-default-arguments
   "--color")
#+END_SRC
*** Magit-delta
Delta is a custom pager for git which provides side-by-side diffs, syntax-aware
highlighting, and more. It also provides some features within magit.
#+BEGIN_SRC emacs-lisp
  (require 'magit-delta)
#+END_SRC
**** Theme
Use the Dracula dark theme.
#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'magit-delta-default-dark-theme "Dracula")
#+END_SRC
*** Hooks
#+BEGIN_SRC emacs-lisp
  (add-hook 'magit-mode-hook (lambda () (magit-delta-mode 1)))
#+END_SRC
** Org
*** Customize headline ellipses
When a headline is folded and contains additional content, org-mode
defaults to showing ellipses (three individual dots). org-mode also
has a custom face it applies to ellipses, but /only/ when the
~org-ellipsis~ variable is empty. This custom face includes an
underline by default, which I can't say I think looks great, so we
remove that. The default face is also identical to the default second
level heading, so we use a different color as well.
#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'org-ellipsis " ⤵")
  (set-face-attribute 'org-ellipsis nil
                      :foreground "plum"
                      :underline nil
                      )
#+END_SRC
** VTerm
#+BEGIN_SRC emacs-lisp
  (require 'vterm)
#+END_SRC
*** Colors
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'vterm-color-black nil :foreground "#252525")
  (set-face-attribute 'vterm-color-red nil :foreground "#cc4949")
  (set-face-attribute 'vterm-color-green nil :foreground "#49cc49")
  (set-face-attribute 'vterm-color-yellow nil :foreground "#cccc49")
  (set-face-attribute 'vterm-color-blue nil :foreground "#5c5cff")
  (set-face-attribute 'vterm-color-magenta nil :foreground "#cc49cc")
  (set-face-attribute 'vterm-color-cyan nil :foreground "#49cccc")
  (set-face-attribute 'vterm-color-white nil :foreground "#e5e5e5")
#+END_SRC
